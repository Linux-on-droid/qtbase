Description: H2: remove a rather useless limit on the number of streams
 SETTINGS for max concurrect number of streams is 'one direction' - this
 is how our peer conveys the possible number of streams _we_ can open,
 not _them_. If they choose to have it unlimited - let it be so.
 .
 It's possible to send 0 as maximum number, also, it's possible to
 reduce the maximum compared to initial at some point - then I have
 to avoid integer overflows.
Origin: upstream, https://code.qt.io/cgit/qt/qtbase.git/commit/?id=46940ca73791e87e
Last-Update: 2022-06-20

--- a/src/network/access/http2/http2protocol_p.h
+++ b/src/network/access/http2/http2protocol_p.h
@@ -133,9 +133,6 @@ enum Http2PredefinedParameters
     maxPayloadSize = (1 << 24) - 1, // HTTP/2 6.5.2
 
     defaultSessionWindowSize = 65535, // HTTP/2 6.5.2
-    // Using 1000 (rather arbitrarily), just to
-    // impose *some* upper limit:
-    maxPeerConcurrentStreams  = 1000,
     maxConcurrentStreams = 100 // HTTP/2, 6.5.2
 };
 
--- a/src/network/access/qhttp2protocolhandler.cpp
+++ b/src/network/access/qhttp2protocolhandler.cpp
@@ -393,7 +393,8 @@ bool QHttp2ProtocolHandler::sendRequest(
         initReplyFromPushPromise(message, key);
     }
 
-    const auto streamsToUse = std::min<quint32>(maxConcurrentStreams - activeStreams.size(),
+    const auto streamsToUse = std::min<quint32>(maxConcurrentStreams > activeStreams.size()
+                                                ? maxConcurrentStreams - activeStreams.size() : 0,
                                                 requests.size());
     auto it = requests.begin();
     for (quint32 i = 0; i < streamsToUse; ++i) {
@@ -1078,13 +1079,8 @@ bool QHttp2ProtocolHandler::acceptSettin
         QMetaObject::invokeMethod(this, "resumeSuspendedStreams", Qt::QueuedConnection);
     }
 
-    if (identifier == Settings::MAX_CONCURRENT_STREAMS_ID) {
-        if (newValue > maxPeerConcurrentStreams) {
-            connectionError(PROTOCOL_ERROR, "SETTINGS invalid number of concurrent streams");
-            return false;
-        }
+    if (identifier == Settings::MAX_CONCURRENT_STREAMS_ID)
         maxConcurrentStreams = newValue;
-    }
 
     if (identifier == Settings::MAX_FRAME_SIZE_ID) {
         if (newValue < Http2::minPayloadLimit || newValue > Http2::maxPayloadSize) {
