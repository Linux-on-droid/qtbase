Description: handle even more include in enum cases
 The solution in d3ed7dac8aa2f4ede0c409254b9dd44842086be0 was needlessly
 complicated, and broke a valid use case.
 The issue of no identifier being available to parse after the include
 has been processed can instead be solved by moving the test for the
 closing brace after the include processing.
Origin: upstream, https://code.qt.io/cgit/qt/qtbase.git/commit/?id=87973325f1b99f2b
Last-Update: 2022-04-07

--- a/src/tools/moc/moc.cpp
+++ b/src/tools/moc/moc.cpp
@@ -305,10 +305,9 @@ bool Moc::parseEnum(EnumDef *def)
             return IncludeState::NoInclude;
     };
     do {
+        handleInclude();
         if (lookup() == RBRACE) // accept trailing comma
             break;
-        if ( handleInclude() == IncludeState::IncludeEnd)
-            continue;
         next(IDENTIFIER);
         def->values += lexem();
         handleInclude();
--- a/tests/auto/tools/moc/enum_with_include.h
+++ b/tests/auto/tools/moc/enum_with_include.h
@@ -34,6 +34,11 @@ class Foo : public QObject {
     enum en {
        #include <enum_inc.h>
     };
+
+    enum class en2 {
+       #include <enum_inc.h>
+       reference = 42
+    };
     Q_OBJECT
 };
 #endif
